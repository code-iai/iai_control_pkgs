(in-package :urdf-management)

(defvar *robot-model* nil)
(defvar *urdf-pub* nil)

(def-service-callback AlterUrdf (action xml names)
  (ros-info (urdf-management) "Stuff happens")
  (cond
    ((eql action (symbol-code 'urdf_management-srv:alterurdf-request :add))
     (add-to-robot xml))
    ((eql action (symbol-code 'urdf_management-srv:alterurdf-request :remove))
     (remove-from-robot names)))
  (publish-urdf)
  (make-response :success t))

(defun alter-urdf-server ()
  (setf *robot-model* (parse-urdf (get-param "robot_description")))
  (setf *urdf-pub* (advertise "urdf" 'std_msgs-msg:String :latch t))
  (register-service "alter_urdf" 'AlterUrdf)
  (ros-info (urdf-management) "Ready to alter urdf."))

(defun add-to-robot (xml)
  (let ((parsed-xml (s-xml:parse-xml-string (format nil "<container>~a</container>" xml)
                                            :output-type :xml-struct))
        (link-descriptions nil)
        (joint-descriptions nil))
    (format t "XML: ~a" xml)
    (dolist (child (s-xml:xml-element-children parsed-xml))
      (case (s-xml:xml-element-name child)
        (:|link| (push child link-descriptions))
        (:|joint| (push child joint-descriptions))))
    (dolist (link link-descriptions)
      (add-link-to-robot link))
    (dolist (joint joint-descriptions)
      (add-joint-to-robot joint))))

(defun add-link-to-robot (xml-element)
  (let ((link (cl-urdf::parse-xml-node :|link| xml-element))
        (link-table (links *robot-model*)))
    (setf (gethash (name link) link-table) link)))

(defun add-joint-to-robot (xml-element)
  (let ((joint (cl-urdf::parse-xml-node :|joint| xml-element *robot-model*))
        (joint-table (joints *robot-model*)))
    (setf (gethash (name joint) joint-table) joint)))

(defun remove-from-robot (names)
  (let ((link-table (links *robot-model*))
        (joint-table (joints *robot-model*)))
    (map 'vector (lambda (name)
                   (remhash name link-table)
                   (remhash name joint-table))
         names)))

(defun publish-urdf ()
  (publish-msg *urdf-pub* :data (generate-urdf-string *robot-model*)))